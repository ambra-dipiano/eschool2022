<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Day 4 on ESCAPE Data Science school 2022</title><link>https://escape2020.github.io/school2022/tags/day-4/</link><description>Recent content in Day 4 on ESCAPE Data Science school 2022</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&lt;a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">&lt;img alt="licence" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" />&lt;/a> &lt;b>CC BY-NC-SA 4.0&lt;/b> &lt;br /> For more details on the rights and licenses, please go to the GitHub repo of the School</copyright><lastBuildDate>Thu, 23 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://escape2020.github.io/school2022/tags/day-4/index.xml" rel="self" type="application/rss+xml"/><item><title>Debugging and Profiling Scientific Software</title><link>https://escape2020.github.io/school2022/posts/debugging-profiling/</link><pubDate>Thu, 23 Jun 2022 00:00:00 +0000</pubDate><guid>https://escape2020.github.io/school2022/posts/debugging-profiling/</guid><description>Summary The first step to writing code is to first get it to work both syntactically and scientifically, and later to make it work fast. This lecture will cover both aspects: first the use of a /debugger/ to identify and fix broken code, and then the use of profiling tools to identify which parts of working code be improved for speed or memory usage.
Slides as PDF This browser does not support PDFs.</description></item><item><title>Unit Testing</title><link>https://escape2020.github.io/school2022/posts/unit-testing/</link><pubDate>Tue, 21 Jun 2022 00:00:00 +0000</pubDate><guid>https://escape2020.github.io/school2022/posts/unit-testing/</guid><description>Summary Making sure software works as expected and required is a crucial part of development. Doing this manually is tedious and error prone.
In this lecture, you will learn the basics of automated unit testing for python using pytest.
Slides as PDF This browser does not support PDFs. Please download the PDF to view it: Download PDF.
References and external https://docs.pytest.org/</description></item></channel></rss>